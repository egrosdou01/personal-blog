"use strict";(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([[2069],{3913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=t(4848),r=t(8453);const l={slug:"cilium-cluster-mesh-rke2",title:"Cilium Cluster Mesh on RKE2",authors:["egrosdou01"],date:new Date("2024-07-18T00:00:00.000Z"),tags:["cilium","rke2","open-source","kubernetes","gitops","devops","2024"]},i=void 0,o={permalink:"/personal-blog/blog/cilium-cluster-mesh-rke2",source:"@site/blog/2024-07-18-rke2-cilium/cilium-cluster-mesh-rke2.md",title:"Cilium Cluster Mesh on RKE2",description:"Introduction",date:"2024-07-18T00:00:00.000Z",tags:[{inline:!1,label:"Cilium",permalink:"/personal-blog/blog/tags/cilium",description:"eBPF-based Networking, Security, and Observability for Kubernetes"},{inline:!1,label:"RKE2",permalink:"/personal-blog/blog/tags/rke2",description:"Rancher Kubernetes Engine 2 (RKE2)"},{inline:!1,label:"Open Source",permalink:"/personal-blog/blog/tags/open-source",description:"Open source software"},{inline:!1,label:"Kubernetes",permalink:"/personal-blog/blog/tags/kubernetes",description:"Container orchestration platform for automating application deployment, scaling, and management"},{inline:!1,label:"GitOps",permalink:"/personal-blog/blog/tags/gitops",description:"Operational framework that uses Git as a single source of truth for declarative infrastructure and applications"},{inline:!1,label:"DevOps",permalink:"/personal-blog/blog/tags/devops",description:"Set of practices that combines software development and IT operations"},{inline:!1,label:"2024",permalink:"/personal-blog/blog/tags/2024",description:"The year the post went online"}],readingTime:10.415,hasTruncateMarker:!0,authors:[{name:"Eleni Grosdouli",title:"DevOps Consulting Engineer at Cisco Systems",url:"https://github.com/egrosdou01",imageURL:"https://github.com/egrosdou01.png",key:"egrosdou01"}],frontMatter:{slug:"cilium-cluster-mesh-rke2",title:"Cilium Cluster Mesh on RKE2",authors:["egrosdou01"],date:"2024-07-18T00:00:00.000Z",tags:["cilium","rke2","open-source","kubernetes","gitops","devops","2024"]},unlisted:!1,prevItem:{title:"Rancher RKE2 Cluster on Azure",permalink:"/personal-blog/blog/rancher-rke2-cilium-azure"},nextItem:{title:"Cilium on EKS with Sveltos",permalink:"/personal-blog/blog/cilium-eks-sveltos"}},a={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Lab Setup",id:"lab-setup",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Infrastructure",id:"infrastructure",level:3},{value:"Cilium Cluster Mesh",id:"cilium-cluster-mesh",level:3},{value:"Resources",id:"resources",level:3},{value:"Step 0: RKE2 Terraform Provider",id:"step-0-rke2-terraform-provider",level:2},{value:"Step 1: Export kubeconfig",id:"step-1-export-kubeconfig",level:2},{value:"Step 2: Helm list and values export",id:"step-2-helm-list-and-values-export",level:2},{value:"Validate",id:"validate",level:3},{value:"Collect rke2-cilium Helm Values",id:"collect-rke2-cilium-helm-values",level:3},{value:"Step 3: Cilium Cluster Mesh Helm Values",id:"step-3-cilium-cluster-mesh-helm-values",level:2},{value:"Add rke2-charts Repo",id:"add-rke2-charts-repo",level:3},{value:"Update mesh01 Helm Values",id:"update-mesh01-helm-values",level:3},{value:"Update mesh02 Helm Values",id:"update-mesh02-helm-values",level:3},{value:"Update mesh01/mesh02 Helm deployment",id:"update-mesh01mesh02-helm-deployment",level:3},{value:"Step 4: Validate Cilium Cluster Mesh",id:"step-4-validate-cilium-cluster-mesh",level:2},{value:"On mesh01 and mesh02",id:"on-mesh01-and-mesh02",level:3},{value:"Step 5: Hubble UI",id:"step-5-hubble-ui",level:2},{value:"\u2709\ufe0f Contact",id:"\ufe0f-contact",level:2},{value:"Conclusions",id:"conclusions",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["After spending some time working with the on-prem ",(0,s.jsx)(n.a,{href:"https://docs.rke2.io/",children:"RKE2"})," lab setup, I came to notice a couple of issues while forming in an automated fashion the ",(0,s.jsx)(n.a,{href:"https://docs.cilium.io/en/stable/network/clustermesh/clustermesh/",children:"Cilium cluster mesh"})," between on-prem clusters."]}),"\n",(0,s.jsxs)(n.p,{children:["In today's post, we will go through the step-by-step process of forming a ",(0,s.jsx)(n.strong,{children:"Cilium Cluster Mesh"})," and explain any issues that might have arisen by following the ",(0,s.jsx)(n.strong,{children:"GitOps"})," approach. The cilium CLI will not be required. The deployment will be performed primarily via ",(0,s.jsx)(n.code,{children:"Helm"})," and ",(0,s.jsx)(n.code,{children:"kubectl"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, we will use the ",(0,s.jsx)(n.a,{href:"https://docs.cilium.io/en/v1.15/network/clustermesh/clustermesh/#shared-certificate-authority",children:"shared CA"})," (Certificate Authority) approach as this is a convenient way to form a cluster mesh in an automated fashion and also the best practise for the Hubble Relay setup. The approach will enable ",(0,s.jsx)(n.strong,{children:"mTLS"})," across clusters."]}),"\n",(0,s.jsx)(n.h2,{id:"lab-setup",children:"Lab Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"+-----------------+----------------------+----------------------+\n|   Cluster Name  |        Type          |       Version        |\n+-----------------+----------------------+----------------------+\n|   mesh01        | RKE2 managed cluster | RKE2 v1.27.14+rke2r1 |\n|   mesh02        | RKE2 managed cluster | RKE2 v1.27.14+rke2r1 |\n+-----------------+----------------------+----------------------+\n\n+-------------------+----------+\n|    Deployment     | Version  |\n+-------------------+----------+\n| Rancher2 Provider |  4.2.0   |\n|     Cilium        | 1.15.500 |\n+-------------------+----------+\n"})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.h3,{id:"infrastructure",children:"Infrastructure"}),"\n",(0,s.jsxs)(n.p,{children:["For this demonstration, we assume readers have at least two RKE2 clusters up and running. In our case, to create an RKE2 cluster on-prem we used the ",(0,s.jsx)(n.a,{href:"https://registry.terraform.io/providers/rancher/rancher2/latest/docs",children:"Rancher2"})," Terraform provider. The provider allows users to create different resources across different platforms alongside defining information for the RKE2 deployment like IP Address handling, and CNI (Container Network Interface) custom configuration."]}),"\n",(0,s.jsx)(n.h3,{id:"cilium-cluster-mesh",children:"Cilium Cluster Mesh"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"Cluster Name"})," and the ",(0,s.jsx)(n.strong,{children:"Cluster ID"})," must be unique."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"Pods"})," and the ",(0,s.jsx)(n.strong,{children:"Services CIDR"})," ranges must be unique across all the Kubernetes Clusters. The pods need to communicate over a unique IP address. See the IP address schema table above."]}),"\n",(0,s.jsx)(n.li,{children:"Node CIDRs must be unique. The Nodes to have IP connectivity."}),"\n",(0,s.jsxs)(n.li,{children:["The Cilium pods must connect to the ",(0,s.jsx)(n.code,{children:"ClusterMesh API Server"})," service exposed on every Kubernetes cluster."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(n.p,{children:"Ensure the below are satisfied."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Helm CLI installed"}),"\n",(0,s.jsx)(n.li,{children:"kubectl installed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-0-rke2-terraform-provider",children:"Step 0: RKE2 Terraform Provider"}),"\n",(0,s.jsxs)(n.p,{children:["The below snippet is an example configuration on how to deploy an RKE2 cluster via the ",(0,s.jsx)(n.strong,{children:"Rancher2"})," Provider."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-terraform",children:'  # RKE2 configuration\n  resource "rancher2_cluster_v2" "rke2" {\n    # Define basic cluster details like labels and annotations\n    annotations           = var.rancher_env.cluster_annotations\n    kubernetes_version    = var.rancher_env.rke2_version\n    labels                = var.rancher_env.cluster_labels\n    enable_network_policy = var.rancher_env.network_policy # Option to enable or disable Project Network Isolation.\n    name                  = var.rancher_env.cluster_id\n      \n      # Define the Cilium Configuration for the cluster\n      chart_values = <<-EOF\n        rke2-cilium:\n          k8sServiceHost: 127.0.0.1\n          k8sServicePort: 6443\n          kubeProxyReplacement: true # Prepare the deployment for kube-proxy replacement\n          operator:\n            replicas: 1\n          hubble: # Enable Hubble for observability \n            enabled: true\n            peerService:\n              clusterDomain: cluster.local\n            relay:\n              enabled: true\n            tls:\n              auto:\n                certValidityDuration: 1095\n                enabled: true\n                method: helm\n            ui:\n              enabled: true\n        EOF\n      \n      # Apply machine global settings for the clusters\n      machine_global_config = <<EOF\n        cni: "cilium" # Enable Cilium CNI for every cluster\n        cluster-cidr: ${var.rke_cluster_cidr}\n        service-cidr: ${var.rke_service_cidr}\n        disable-kube-proxy: true # Disable kube-proxy\n        etcd-expose-metrics: false # Do not expose the etcd metrics\n        EOF\n      \n      # Start building the controller and workder nodes dynamically\n      dynamic "machine_pools" {\n        for_each = var.node\n        content {\n          cloud_credential_secret_name = data.rancher2_cloud_credential.auth.id\n          control_plane_role           = machine_pools.key == "ctl_plane" ? true : false\n          etcd_role                    = machine_pools.key == "ctl_plane" ? true : false\n          name                         = machine_pools.value.name\n          quantity                     = machine_pools.value.quantity\n          worker_role                  = machine_pools.key != "ctl_plane" ? true : false\n\n          machine_config {\n            kind = rancher2_machine_config_v2.nodes[machine_pools.key].kind\n            name = replace(rancher2_machine_config_v2.nodes[machine_pools.key].name, "_", "-")\n          }\n        }\n      }\n      machine_selector_config {\n        config = null\n      }\n    }\n  }\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As the focus here is more on the ",(0,s.jsx)(n.strong,{children:"Cilium Cluster Mesh"})," setup, we will not go into much detail about the Terraform RKE2 deployment. If there is demand for an in-depth blog post about Terraform RKE2 deployments, feel free to get in touch."]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-export-kubeconfig",children:"Step 1: Export kubeconfig"}),"\n",(0,s.jsxs)(n.p,{children:["Either from the Terraform execution plan or via the Rancher UI, collect the kubeconfig of the RKE2 clusters. Alternatively, we can ",(0,s.jsx)(n.code,{children:"SSH"})," into one of the RKE2 master nodes and collect the ",(0,s.jsx)(n.code,{children:"kubeconfig"})," found in the directory ",(0,s.jsx)(n.code,{children:"/etc/rancher/rke2/rke2.yaml"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ export KUBECONFIG=<directory of kubeconfig>\n$ kubectl nodes\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-helm-list-and-values-export",children:"Step 2: Helm list and values export"}),"\n",(0,s.jsxs)(n.p,{children:["RKE2 comes with its own Cilium CNI Helm chart. That means RKE2 clusters will have an RKE2 Cilium Helm chart deployment in the ",(0,s.jsx)(n.code,{children:"kube-system"})," namespace."]}),"\n",(0,s.jsx)(n.h3,{id:"validate",children:"Validate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ export KUBECONFIG=<directory of kubeconfig>\n$ helm list -n kube-system\n\nNAME                            \tNAMESPACE  \tREVISION\tUPDATED                                \tSTATUS  \tCHART                                       \tAPP VERSION\nrke2-cilium                     \tkube-system\t1       \t2024-07-13 09:32:09.981662 +0200 CEST  \tdeployed\trke2-cilium-1.15.500                        \t1.15.5     \nrke2-coredns                    \tkube-system\t1       \t2024-07-13 07:05:49.846980773 +0000 UTC\tdeployed\trke2-coredns-1.29.002                       \t1.11.1     \nrke2-ingress-nginx              \tkube-system\t1       \t2024-07-13 07:06:24.63272854 +0000 UTC \tdeployed\trke2-ingress-nginx-4.8.200                  \t1.9.3      \nrke2-metrics-server             \tkube-system\t1       \t2024-07-13 07:06:24.86243331 +0000 UTC \tdeployed\trke2-metrics-server-2.11.100-build2023051513\t0.6.3      \nrke2-snapshot-controller        \tkube-system\t1       \t2024-07-13 07:06:26.764326178 +0000 UTC\tdeployed\trke2-snapshot-controller-1.7.202            \tv6.2.1     \nrke2-snapshot-controller-crd    \tkube-system\t1       \t2024-07-13 07:06:24.217899546 +0000 UTC\tdeployed\trke2-snapshot-controller-crd-1.7.202        \tv6.2.1     \nrke2-snapshot-validation-webhook\tkube-system\t1       \t2024-07-13 07:06:24.544748567 +0000 UTC\tdeployed\trke2-snapshot-validation-webhook-1.7.302    \tv6.2.2 \n"})}),"\n",(0,s.jsx)(n.h3,{id:"collect-rke2-cilium-helm-values",children:"Collect rke2-cilium Helm Values"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"mesh01"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ helm get values rke2-cilium -n kube-system -o yaml > values_mesh01.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"mesh02"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ helm get values rke2-cilium -n kube-system -o yaml > values_mesh02.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example values_mesh01.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"global:\n  cattle:\n    clusterId: c-m-8ffz659l\n  clusterCIDR: 10.244.0.0/16\n  clusterCIDRv4: 10.244.0.0/16\n  clusterDNS: 10.96.0.10\n  clusterDomain: cluster.local\n  rke2DataDir: /var/lib/rancher/rke2\n  serviceCIDR: 10.96.0.0/18\nhubble:\n  enabled: true\n  peerService:\n    clusterDomain: cluster.local\n  relay:\n    enabled: true\n  tls:\n    auto:\n      certValidityDuration: 1095\n      enabled: true\n      method: helm\n  ui:\n    enabled: true\nk8sServiceHost: 127.0.0.1\nk8sServicePort: 6443\nkubeProxyReplacement: true\noperator:\n  replicas: 1\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The configuration comes from the ",(0,s.jsx)(n.code,{children:"machine_global_config"})," and ",(0,s.jsx)(n.code,{children:"chart_values"})," sections defined in the Terraform code found in ",(0,s.jsx)(n.a,{href:"#step-0-rke2-terraform-provider",children:"Step 0"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"step-3-cilium-cluster-mesh-helm-values",children:"Step 3: Cilium Cluster Mesh Helm Values"}),"\n",(0,s.jsxs)(n.p,{children:["To set up the Cilium cluster mesh, we need to include the ",(0,s.jsx)(n.code,{children:"rke2-charts"})," repo and later on, update the Helm values with the required cluster mesh settings. For this demonstration, we will use the ",(0,s.jsx)(n.code,{children:"NodePort"})," deployment. For production environments, a ",(0,s.jsx)(n.code,{children:"LoadBalancer"})," deployment is recommended as we do not have to rely on Node availability."]}),"\n",(0,s.jsx)(n.h3,{id:"add-rke2-charts-repo",children:"Add rke2-charts Repo"}),"\n",(0,s.jsx)(n.p,{children:"The action should be performed in both clusters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ helm repo add rke2-charts https://rke2-charts.rancher.io/\n$ helm repo update\n"})}),"\n",(0,s.jsx)(n.h3,{id:"update-mesh01-helm-values",children:"Update mesh01 Helm Values"}),"\n",(0,s.jsx)(n.p,{children:"On the same level as global, add the below configuration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'tls:\n  ca:\n    cert: "" # Base64 encoded shared CA crt\n    key: "" # Base64 encoded shared CA key\ncluster:\n  name: mesh01 # The unique name of the cluster\n  id: 1 # The unique ID of the cluster used for the cluster mesh formation\nclustermesh:\n  apiserver:\n    replicas: 2\n    service:\n      type: NodePort # Set the Clustermesh API service to be of type NodePort. Not recommended for Production environments\n      nodePort: 32379 # Define the listening port for the Clustermesh API service\n    tls:\n      authMode: cluster\n      server:\n        extraDnsNames:\n          - "mesh01.mesh.cilium.io" # Define the extra DNS\n  config:\n    clusters:\n    - address: ""\n      ips:\n      - <Node IP> # The Node IP of the mesh02 cluster\n      name: mesh02\n      port: 32380 # The NodePort defined on mesh02 for the Clustermesh API service\n    enabled: true\n    domain: "mesh.cilium.io" # Define the default domain for the mesh\n  useAPIServer: true # Enable the Clustermesh API deployment\n'})}),"\n",(0,s.jsx)(n.h3,{id:"update-mesh02-helm-values",children:"Update mesh02 Helm Values"}),"\n",(0,s.jsx)(n.p,{children:"On the same level as global, add the below configuration."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'tls:\n  ca:\n    cert: "" # Base64 encoded shared CA crt\n    key: "" # Base64 encoded shared CA key\ncluster:\n  name: mesh02 # The unique name of the cluster\n  id: 2 # The unique ID of the cluster used for the cluster mesh formation\nclustermesh:\n  apiserver:\n    replicas: 2\n    service:\n      type: NodePort # Set the Clustermesh API service to be of type NodePort. Not recommended for production environments\n      nodePort: 32380 # Define the listening port for the Clustermesh API service\n    tls:\n      authMode: cluster\n      server:\n        extraDnsNames:\n          - "mesh02.mesh.cilium.io" # Define the extra DNS\n  config:\n    clusters:\n    - address: ""\n      ips:\n      - <Node IP> # The Node IP of the mesg01 cluster\n      name: mesh01 # Define the name of the cluster\n      port: 32379 # The NodePort defined on mesh02 for the Clustermesh API service\n    enabled: true\n    domain: "mesh.cilium.io" # Define the default domain for the mesh\n  useAPIServer: true # Enable the Clustermesh API deployment\n'})}),"\n",(0,s.jsx)(n.h3,{id:"update-mesh01mesh02-helm-deployment",children:"Update mesh01/mesh02 Helm deployment"}),"\n",(0,s.jsxs)(n.p,{children:["To ensure the updated Helm values are applied, we will use the HELM CLI to update the ",(0,s.jsx)(n.code,{children:"rke2-cilium"})," deployment."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ helm upgrade rke2-cilium rke2-charts/rke2-cilium --version 1.15.500 --namespace kube-system -f values_mesh01.yaml\n\n$ helm list -n kube-system\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Perform the commands for the ",(0,s.jsx)(n.code,{children:"mesh02"})," cluster."]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"helm upgrade"})," command will create a new revision of the ",(0,s.jsx)(n.code,{children:"rke2-cilium"})," application and show if the update was successful or not. Additionally, the cilium daemonset will get restarted and the Clustermesh API deployment will get created. Execute the commands below to double-check the update action."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl rollout status daemonset cilium -n kube-system\n\n$ kubectl get pods,svc -n kube-system | grep -i clustermesh\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-4-validate-cilium-cluster-mesh",children:"Step 4: Validate Cilium Cluster Mesh"}),"\n",(0,s.jsx)(n.p,{children:"As we do not use the Cilium CLI, to ensure the Cilium cluster mesh works as expected, we will exec into the cilium daemonset and check the required details."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ kubectl get ds -n kube-system | grep -i cilium\ncilium                          4         4         4       4            4           kubernetes.io/os=linux   7d6h\n"})}),"\n",(0,s.jsx)(n.h3,{id:"on-mesh01-and-mesh02",children:"On mesh01 and mesh02"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ kubectl exec -it ds/cilium -n kube-system -- cilium status | grep -i clustermesh\n\nDefaulted container "cilium-agent" out of: cilium-agent, install-portmap-cni-plugin (init), config (init), mount-cgroup (init), apply-sysctl-overwrites (init), mount-bpf-fs (init), clean-cilium-state (init), install-cni-binaries (init)\nClusterMesh:             1/1 clusters ready, 11 global-services\n'})}),"\n",(0,s.jsxs)(n.p,{children:["On both sides, the ",(0,s.jsx)(n.code,{children:"ClusterMesh"})," should point to ",(0,s.jsx)(n.code,{children:"1/1 clusters ready"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ kubectl exec -it ds/cilium -n kube-system -- cilium-health status               \nDefaulted container "cilium-agent" out of: cilium-agent, install-portmap-cni-plugin (init), config (init), mount-cgroup (init), apply-sysctl-overwrites (init), mount-bpf-fs (init), clean-cilium-state (init), install-cni-binaries (init)\nProbe time:   2024-07-20T13:58:47Z\nNodes:\n  mesh01/mesh01-controller-3d16581b-7q5bj (localhost):\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=693.829\xb5s\n      HTTP to agent:   OK, RTT=118.583\xb5s\n    Endpoint connectivity to 10.244.1.71:\n      ICMP to stack:   OK, RTT=688.411\xb5s\n      HTTP to agent:   OK, RTT=251.927\xb5s\n  mesh01/mesh01-controller-3d16581b-v58rq:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=671.007\xb5s\n      HTTP to agent:   OK, RTT=237.395\xb5s\n    Endpoint connectivity to 10.244.0.75:\n      ICMP to stack:   OK, RTT=702.976\xb5s\n      HTTP to agent:   OK, RTT=342.115\xb5s\n  mesh01/mesh01-worker-7ced0c6c-lz9sp:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=819.21\xb5s\n      HTTP to agent:   OK, RTT=397.398\xb5s\n    Endpoint connectivity to 10.244.3.215:\n      ICMP to stack:   OK, RTT=821.223\xb5s\n      HTTP to agent:   OK, RTT=465.965\xb5s\n  mesh01/mesh01-worker-7ced0c6c-w294x:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=738.787\xb5s\n      HTTP to agent:   OK, RTT=335.803\xb5s\n    Endpoint connectivity to 10.244.2.36:\n      ICMP to stack:   OK, RTT=693.326\xb5s\n      HTTP to agent:   OK, RTT=426.571\xb5s\n  mesh02/mesh02-controller-52d8e160-b27rn:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=683.278\xb5s\n      HTTP to agent:   OK, RTT=335.076\xb5s\n    Endpoint connectivity to 10.245.0.106:\n      ICMP to stack:   OK, RTT=818.386\xb5s\n      HTTP to agent:   OK, RTT=387.314\xb5s\n  mesh02/mesh02-controller-52d8e160-q4rvf:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=683.097\xb5s\n      HTTP to agent:   OK, RTT=301.448\xb5s\n    Endpoint connectivity to 10.245.1.75:\n      ICMP to stack:   OK, RTT=748.101\xb5s\n      HTTP to agent:   OK, RTT=510.124\xb5s\n  mesh02/mesh02-worker-a1c14ae0-5l759:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=631.954\xb5s\n      HTTP to agent:   OK, RTT=266.391\xb5s\n    Endpoint connectivity to 10.245.3.232:\n      ICMP to stack:   OK, RTT=751.853\xb5s\n      HTTP to agent:   OK, RTT=433.049\xb5s\n  mesh02/mesh02-worker-a1c14ae0-c7tcb:\n    Host connectivity to x.x.x.x:\n      ICMP to stack:   OK, RTT=671.823\xb5s\n      HTTP to agent:   OK, RTT=365.949\xb5s\n    Endpoint connectivity to 10.245.2.69:\n      ICMP to stack:   OK, RTT=690.894\xb5s\n      HTTP to agent:   OK, RTT=466.73\xb5s\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:'With the cilium-health status command, you should be able to see all the nodes from both clusters. Check the ICMP and HTTP status. Should be "OK".'}),(0,s.jsx)(n.p,{children:"Also, it might take a couple of minutes till the cilium-health status is available."}),(0,s.jsx)(n.p,{children:"If the time-out persists, have a look at the firewall rules and whether traffic between the clusters is allowed."})]}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"The NodePort IP addresses set for the cluster mesh need to be the IP addresses of the worker node instead of the master node. If they are the master node, the Cilium Cluster Mesh will not get deployed and we will get the below error."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"remote-etcd-cluster01                                                             4m25s ago      4s ago       22      failed to detect whether the cluster configuration is required: etcdserver: permission denied \n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-5-hubble-ui",children:"Step 5: Hubble UI"}),"\n",(0,s.jsxs)(n.p,{children:["To work with the Hubble UI we can use the ",(0,s.jsx)(n.code,{children:"kubectl port-forward"})," of the Hubble UI service or update the existing ",(0,s.jsx)(n.code,{children:"rke2-cilium"})," deployment on one of the nodes and expose the Hubble UI as a ",(0,s.jsx)(n.code,{children:"NodePort"})," service. Just include the below in the ",(0,s.jsx)(n.code,{children:"values_mesh01.yaml"})," or the ",(0,s.jsx)(n.code,{children:"values_mesh02.yaml"})," file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"  ui:\n    enabled: true\n    service:\n      type: NodePort\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more information about the RKE2 Cilium Helm Chart values, have a look ",(0,s.jsx)(n.a,{href:"https://artifacthub.io/packages/helm/rke2-charts/rke2-cilium/1.15.500",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-contact",children:"\u2709\ufe0f Contact"}),"\n",(0,s.jsxs)(n.p,{children:["If you have any questions, feel free to get in touch! You can use the ",(0,s.jsx)(n.code,{children:"Discussions"})," option found ",(0,s.jsx)(n.a,{href:"https://github.com/egrosdou01/personal-blog/discussions",children:"here"})," or reach out to me on any of the social media platforms provided. \ud83d\ude0a"]}),"\n",(0,s.jsx)(n.p,{children:"We look forward to hearing from you!"}),"\n",(0,s.jsx)(n.h2,{id:"conclusions",children:"Conclusions"}),"\n",(0,s.jsx)(n.p,{children:"This is it! We performed a Cilium cluster mesh between two on-prem RKE2 clusters in just a few steps! \ud83c\udf89"}),"\n",(0,s.jsx)(n.p,{children:"It's a wrap for this post! \ud83c\udf89 Thanks for reading! Stay tuned for more exciting updates!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},l=s.createContext(r);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);